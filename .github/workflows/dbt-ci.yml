name: "dbt CI/CD Pipeline"

on:
  push:
    branches: [ main ]
    paths:
      - 'data-pipelines/dbt_analytics/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'data-pipelines/dbt_analytics/**'

env:
  DBT_PROFILES_DIR: ./data-pipelines/dbt_analytics
  DBT_PROJECT_DIR: ./data-pipelines/dbt_analytics

jobs:
  dbt-lint:
    name: "SQL Linting"
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install SQLFluff
        run: pip install sqlfluff
        
      - name: Run SQLFluff Lint
        run: |
          cd ${{ env.DBT_PROJECT_DIR }}
          sqlfluff lint models/
          
  dbt-test:
    name: "dbt Build & Test"
    runs-on: ubuntu-latest
    needs: dbt-lint
    
    steps:
      - uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-redshift pytest
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: dbt deps
        run: dbt deps
        working-directory: ${{ env.DBT_PROJECT_DIR }}
        
      - name: Configure dbt profiles
        run: |
          mkdir -p ~/.dbt
          cat > ~/.dbt/profiles.yml << EOF
          default:
            target: ci
            outputs:
              ci:
                type: redshift
                host: ${DBT_HOST}
                user: ${DBT_USER}
                pass: ${DBT_PASSWORD}
                port: 5439
                dbname: analytics
                schema: ci_test
                threads: 4
                keepalives_idle: 240
                connect_timeout: 10
          EOF
        env:
          DBT_HOST: ${{ secrets.DBT_HOST }}
          DBT_USER: ${{ secrets.DBT_USER }}
          DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}
        
      - name: dbt compile
        run: dbt compile
        working-directory: ${{ env.DBT_PROJECT_DIR }}
          
      - name: dbt test
        run: dbt test
        working-directory: ${{ env.DBT_PROJECT_DIR }}
        
      - name: Generate dbt docs
        if: github.ref == 'refs/heads/main'
        run: |
          cd ${{ env.DBT_PROJECT_DIR }}
          dbt docs generate
          
      - name: Upload dbt docs artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: dbt-docs
          path: ${{ env.DBT_PROJECT_DIR }}/target/
          
  publish-docs:
    name: "Publish Documentation"
    runs-on: ubuntu-latest
    needs: dbt-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Download dbt docs
        uses: actions/download-artifact@v3
        with:
          name: dbt-docs
          path: dbt-docs
          
      - name: Upload to S3
        run: |
          aws s3 sync dbt-docs/ s3://${{ secrets.DOCS_BUCKET }}/dbt-docs/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DOCS_CF_DISTRIBUTION }} --paths "/dbt-docs/*"
